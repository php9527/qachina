
#####
fstab:
sd0a / ffs ro,noatime,softdep 1 1
sd0d /mfs ffs ro,noatime,softdep 1 2
sd0e /home ffs ro,noatime,softdep 1 2
swap /root mfs rw,nosuid,-P=/mfs/root,-s=20M 0 0
swap /var mfs rw,nosuid,-P=/mfs/var,-s=30M 0 0
swap /dev mfs rw,nosuid,-P=/mfs/dev,-s=30M,-i=256 0 0
swap /etc mfs rw,nosuid,-P=/mfs/etc,-s=20M 0 0

#####
OpenBSD as a File Server
11/14/2000

With Active Directory threatening the traditional SMB (Server Message Block) Windows file sharing and Appletalk/Chooser MacOS file sharing, open source Unix has an opening to become recognized as a file sharing platform that can cheaply and efficiently replace the more traditional operating systems. Although support for active directory is lacking, in the present interim where SMB, Chooser, and NFS (Network File System) still reign supreme, tools exist to make OpenBSD the perfect file server for cross-platform client networks and complex internetworks.

As an example configuration for the various subsystems involved in this, let's look at my main OpenBSD server at work, which handles Appletalk, SMB, and NFS simultaneously and distributes files over a multi-platform internetwork. There are three repositories of data, which must all be accessible by Macintosh and Windows clients on the internal network:

    /home/www (A local web-hosting directory on newboing, the server in question)
    /deepthought (An NFS mount from deepthought, a remote server at a co-location facility)
    /doca (An NFS mount from doc_a, a local NT server providing main internal file serving)

Given this layout, there are three discernible steps involved in configuration.

Step 1, configuring the mounts

The NFS daemon on deepthought was configured to export only the /home directory and all its subsidiaries, and only to the correct IP address of newboing. This was done via an entry in /etc/exports reading:

/home   202.56.38.123

Then it was mounted on newboing via the following command:

mount -t nfs deepthought.domain.com.au:/home /deepthought

Since there are problems mounting SMB filesystems under OpenBSD (it is possible, but the new smbfs-based smbmount is heavily Linux oriented), I chose to run PC-NFS on doc_a. PC-NFS is a port of NFS to Windows NT and 2000. Without going into the details of PC-NFS configuration, the mount on newboing was performed using the command:

mount -t nfs 192.168.0.40:/data1 /doca

Step 2, exporting data via SMB

The Samba suite, available within the OpenBSD ports tree, provides SMB interoperability for most UNIX platforms. I've used Samba within this instance to export all three data repositories over SMB, for the use of the internal Windows clients. Samba installation from the ports tree is a simple process:

cd /usr/ports/net/samba
make && make install

Samba draws its configuration primarily from one file, /etc/smb.conf. This file is installed with a set of default options by the ports tree distribution. For the purposes of this example, the following implicit configuration was made in smb.conf:

workgroup = documenta
# This defines the workgroup, or in this case 
# NT Domain, as 'documenta'

server string = OpenBSD (newboing)
# The NetBIOS description field, viewable when 
# a windows client browses to this server.

encrypt passwords = yes
# By default, Windows 98 & NT use encrypted passwords, 
# so in nearly every instance they should be enabled.

smb passwd file = /etc/smbpasswd
# Specifies the location of the encrypted password file.

interfaces = 192.168.0.1/24
# Specifies that only the interface spanning 192.168.0.1/24 
# should be Samba-enabled (ie. not over the live interface).

With this generic configuration complete, it's time to specify the shares. These are also entered into smb.conf, with the default example shares commented out using a ; (semi-colon):

[www]
   comment = www
   path = /home/www
   public = yes
   writable = yes
   create mask = 0777

[deepthought]
   comment = deepthought
   path = /deepthought
   public = yes
   writable = yes
   create mask = 0777


[doca]
   comment = doc_a
   path = /doca
   public = yes
   writable = yes
   create mask = 0777

In each case, these shares are "public" -- meaning that anyone with a valid SMB logon on newboing can read, write, and delete (provided the relevant Unix permissions to the files permit it). As previously mentioned, Samba has its own user authentication mechanism, different than OpenBSD's native system authentication. To add a user to the Samba authentication system, perform the following commands:

adduser joe
smbpasswd -a joe

The first command adds the user to the OpenBSD system, the second adds them to the Samba authentication system.

In each instance of the commands above, you will be prompted for password details. For manageability purposes, it is recommended to keep these passwords in synch. This complete, it's time to start the Samba daemons and test your system. There are two daemons that must be started:

nmbd &
smbd &

The first, nmbd, is the NetBIOS naming-scheme daemon, while smbd handles actual SMB file and print sharing. To ensure that the daemons start upon boot, a simple entry in /etc/rc.local is required:

echo -n 'Starting Samba Daemons...'
nmbd -D
smbd -D

Assuming we have added the user "joe" with password "password" and the internal IP address of the Samba server is 192.168.0.1, the following command would be used:

smbclient -L 192.168.0.1 -U joe 

This command attempts to list all SMB shares on the host 192.168.0.1 available to the user joe. You will then be prompted for a password to authenticate the user joe:

added interface ip=192.168.0.1 bcast=192.168.0.255 nmask=255.255.255.0
Password: password

After successfully authenticating, a list of SMB shares will appear:

Domain=[DOCUMENTA] OS=[Unix] Server=[Samba 2.0.6]

 Sharename    Type   Comment
 ---------    ----   -------
 www          Disk   www
 deepthought  Disk   deepthought
 doca         Disk   doc_a
 IPC$         IPC    IPC Service (OpenBSD (newboing))

 Server         Comment
 ---------      -------
 DOC_A
 NEWBOING       OpenBSD (newboing)

 Workgroup      Master
 ---------      -------
 DOCUMENTA      DOC_A

This complete, you're ready to set up Windows clients to use the shares.
Step 3, exporting data via Appletalk

The netatalk (pronounced "nedtalk") package is used to handle Appletalk interoperability. Given that Appletalk is a protocol independent of TCP/IP and that the GENERIC kernel does not contain support for it, the first step towards installation is to build a compatible kernel. Details of kernel configuration were discussed in the previous article in this series, "OpenBSD Kernel Compilation and Optimization," so I will not go into great detail here. A kernel should be built with the option in its configuration file:

option NETATALK

This will provide kernel-level support for Appletalk and its associated protocols. Once the system has been rebooted with this in place, netatalk installation is ready to take place from the ports tree, using the following commands:

cd /usr/ports/net/netatalk
make && make install

In contrast to Samba, netatalk does use OpenBSD's system authentication, so in the case of this example it is not necessary to perform any user configuration, as the system users have already been added. Share definitions are handled by the file /etc/netatalk/AppleVolumes.default for users who have no implicit AppleVolumes file of their own. The file by default contains the single line:

~

This allows each user who logs in to access ~/ (their own home directories). Other shares available to all users should be added to the top of the file /etc/netatalk/AppleVolumes.system, which handles these share definitions as well as file extension descriptors. For this example, the following AppleVolumes.system configuration was required:

#Share		  Comment
/home/www     WWW
/deepthought  deepthought
/doca         doc_a

Unlike other filesharing systems such as NFS and Samba, netatalk requires quite a number of daemons to be run simultaneously in order to achieve full functionality. This is controlled by the file /etc/netatalk/rc.atalk, which is installed by default from the ports tree distribution. To start netatalk simply execute the following commands:

chmod +x /etc/netatalk/rc.atalk
/etc/netatalk/rc.atalk

The bottom command should also be added to /etc/rc.local in order to make netatalk start automatically upon boot. This complete, any Macintosh machines on a local network segment should be able to access these shares via Chooser.

#####
echo 'Power Saver now on'
sudo sysctl hw.setperf=0
sudo sysctl hw.cpuspeed

echo 'Performance Mode now on'
sudo sysctl hw.setperf=100
sudo sysctl hw.cpuspeed

#####
$cat /etc/hostname.iwn0 
nwid AccessPoint
wpakey password
dhcp

# sh /etc/netstart

To scan available access points:
# ifconfig if scan

To associate with an access point AccessPoint manually and use DHCP to obtain IP address:
# ifconfig if nwid AccessPoint wpakey password
# dhclient if

#####
/etc/rc.conf.local
apmd_flags="-C"
apmd_flags="-A"        # auto management by default on this system

First, your system needs to be able to control CPU speed ... sysctl hw.setperf must exist on it.
The main difference between the "automatic" and "cool running" settings is external power and battery management. 

ntpd_flags="-s"
apmd_flags=""

ou may want to start it with the -s flag to set the time immediately on the startup. It is also worth to mention that you may want to use -C or -A flags with the Advanced Power Management daemon. The former optimizes the system for low power use while the latter optimizes for performance when using AC power, however scales down when using battery.

#####
openbsd 显示cpu、主板、硬盘温度及风扇速度的脚本：
#/bin/sh
typeset -i10 HDDCUR
typeset -i10 HDDMAX
typeset -i10 HDDMIN
typeset -i10 CPU
typeset -i10 MainBOARD
typeset -i10 FAN
RAWTEMP=`atactl /dev/sd0c readattr | grep Temperature | cut -f 5`
HDDCUR=`echo $RAWTEMP | sed -e 's/0x.\{10\}/0x/'`
HDDMAX=`echo $RAWTEMP | sed -e 's/0x.\{2\}/0x/' | sed -e 's/.\{8\}$//'`
HDDMIN=`echo $RAWTEMP | sed -e 's/0x.\{6\}/0x/' | sed -e 's/.\{4\}$//'`
CPU=`sysctl hw.sensors.acpitz0.temp0 | cut -d '=' -f2 | cut -c1-2 `
MainBOARD=`sysctl hw.sensors.acpithinkpad0.temp1 | cut -d '=' -f2 | cut -c1-2 `
FAN=`sysctl hw.sensors.acpithinkpad0.fan0 | cut -d '=' -f2 | cut -c1-4 `
echo "Current HDD Temp $HDDCUR degC (Min/Max $HDDMIN/$HDDMAX)"
echo "Current CPU Temp $CPU degC"
echo "Current MainBOARD Temp $MainBOARD degC"
echo "Current CPU FAN $FAN rpm"

#####
# gtf 1440 900 60      #指定目标分辨率和刷新率,注意空格

结果会显示类似这样两行（不同的显示器数值不一样，不能照抄）：

# 1440x900 @ 60.00 Hz (GTF) hsync: 55.92 kHz; pclk: 106.47 MHz
Modeline "1440x900_60.00"  106.47  1440 1520 1672 1904  900 901 904 932  -HSync +Vsync

要做的是手工填入 xorg.conf： 
# ee /etc/X11/xorg.conf 

1、把 “Modeline …… ”整行加到 Section "Monitor"； 
2、把 “Modes 1440x900_60.00” 填入 Section "Screen"。  ???
看清楚，两行都要加入，缺一不可！
这样显示器就不需要依赖于任何桌面软件的设置就能正常工作了。

1. sudo xvidtune，这个会给你一个警告提示说有可能损坏显示器或者显卡，如果你想继续下去点击OK

2. 用left和right按钮调屏幕位置，再Apply按钮试一试看看实际的效果，不满意再用left和right按钮调整再进行测试显示情况。

3. 显示效果满意之后，按show，在终端会输出 "1024x768" 94.50 1024 1093 1168 1376 768 769 772 808 +hsync +vsync 的出现。记下这行输出

4. 先做个备份：sudo cp /etc/X11/xorg.conf /etc/X11/xorg.conf.bak

#xvidtune                                                                     
Vendor: (null), Model: (null)
Num hsync: 1, Num vsync: 1
hsync range 0:  24.00 -  83.00
vsync range 0:  50.00 -  76.00
"1440x900"    106.50   1440 1540 1692 1904    900  903  909  934 -hsync +vsync

再编辑显示配置文件：sudo gedit /etc/X11/xorg.conf。然後找到Section "Monitor"中当前分辨率的那段，你应该会看到类似 Modeline "1024x768" 94.50 1024 1093 1168 1376 768 769 772 808 +hsync +vsync这样的语句（没有的话就将记下来的东西在开头加Modeline，将它添加到EndSection的前面），按照刚才记下来的东西修改其中的相应位置的数值，改完後保存文件为原来的xorg.conf，注销，然後重起即可（在显示登录界面的时候可能还有偏移，但是进入系统之后就正常显示了）。 

Num hsync: 1, Num vsync: 1
hsync range 0:  24.00 -  83.00
vsync range 0:  50.00 -  76.00
"1440x900"    106.50   1440 1536 1688 1904    900  903  909  934 -hsync +vsync

#####
编辑/etc/rc.conf，找到ftpd_flags，修改为ftpd_flags="-DllUSA"。
    ftpd_flags="-llUSA"

The options used here are:

    ll - detailed logging to syslog.
    U - log users so who(1) and similar programs can see them.
    S - log transfers to /var/log/ftpd.
    A - permit only anonymous FTP transfers. 

/etc/ftpwelcome
当用户使用ftp客户端软件连接到服务器后，显示的欢迎信息。
.message
/home/ftp下面的任何目录里都可以有这个文件，用户进入这个目录后就会显示这个文件的内容。 

网友们可能在使用ftp的dir或ls命令时查看文件列表，但是却无法看到，受到了限制，那么无法查看文件列表这就造成了我们许多的麻烦，那么要怎么的解决这个问题呢!现在我们一起来看看吧!

在Win7系统的命令行模式下，使用ftp的dir或ls命令无法查看文件列表，但是使用IE却可以查看。查找相关资料后，大致归结为两种原因：

　　权限有问题

　　windows自带防火墙拦截

　　实验后发现我的情况属于第二种，具体解决方法有以下几种：

　　直接关闭Windows防火墙

　　打开防火墙，但是设置入站规则允许ftp.exe程序接收信息

　　使用netsh命令设置规则

　　[plain]

netsh firewall add rule name="FTP(non-SSL)" program="%systemroot%system32ftp.exe" action=allow protocol=TCP dir=in

netsh set global StatefulFtp disable

　　命令1的作用与第二种方法相同

　　命令2主要用来禁止statefulFTP过滤，这条对我没有影响，但还是建议加上

　　小插曲

　　这里参考了两篇相关的文章(1,2)，分别使用两条相似，却不同的命令

　　[plain]
　　netsh advfirewall firewall add rule name="FTP (non-SSL)" action=allow protocol=TCP dir=in localport=21

　　netsh advfirewall set global StatefulFtp enable

　　[plain]
　　netsh advfirewall firewall add rule name=”FTP Service” action=allow service=ftpsvc protocol=TCP dir=in

　　netsh advfirewall set global StatefulFTP disable

　　真是让人纠结，对于文章中的 localport=21 始终无法对应到windows自带的ftp.exe程序，后来使用tasklist命令查找ftp对应的PID编号，ftp的dir或ls命令无法查看文件列表怎么办 三联

　　再通过命令 netstat 发现ftp.exe在自己电脑上原来端口就不是21。。

　　而文章中的 service=ftpsvc 也没法允许ftp.exe的例外，后来help了以下netsh命令，发现了program参数，才人为添加程序路径。

#####
If you run the command "netstat -an | more", you'll be able to clearly see which ports are in a "listen" state. If you do this while in X, you'll see port 6000 (X Window server) in the output. Since there have been many X Window exploits in the past, you might want to close port 6000. Doing this will not kill X, but you won't be able to use X as a server (which for a typical user is no big deal).

The simplest way to close port 6000 is to edit /usr/X11R6/bin/startx. Search for the line that says this:

     serverargs=""

and change it to say this:

     serverargs="-nolisten tcp"

Next time you start X and run netstat, you should find that port 6000 is closed.

#####
#!/bin/sh 
 
for kernel in /bsd /bsd.mp 
do 
        config -fe $kernel << EOF 
find mpbios 
disable mpbios 
find mpbios 
find acpimadt 
disable acpimadt 
find acpimadt 
quit 
EOF 
done 

#####
# wsconsctl keyboard.bell.pitch=0
# wsconsctl keyboard.bell.volume=0

# ---- File: /etc/rc.local ----
# Append these two lines:
/sbin/wsconsctl keyboard.bell.pitch=0
/sbin/wsconsctl keyboard.bell.volume=0

# ---- File: /etc/wsconsctl.conf ----
# Append these lines:
keyboard.bell.pitch=0
keyboard.bell.volume=0

# wsfontload -h 8 -e ibm /usr/share/misc/pcvtfonts/vt220l.808
# wsconscfg -dF 5
# wsconscfg -t 80x50 5

# pkg_delete -q /var/db/pkg/* 
# mkdir /mnt/usb
# mount_msdos /dev/sd0i /mnt/usb

route add -net 204.12.16.0 -netmask 255.255.255.0  172.20.8.252

# chflags schg /bin/*
# chflags schg /sbin/*
/bin/ls -lo /bin

# chmod g-w,o-r /var/log/*
# mkdir /mnt/cdrom
# mkdir /mnt/floppy
# vi /etc/fstab
   /dev/cd0a /mnt/cdrom cd9660 ro,nodev,nosuid,noauto 0 0
   /dev/fd0a /mnt/floppy msdos rw,nodev,nosuid,noauto 0 0

