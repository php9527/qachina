;; vim:filetype=lisp
(in-package :clfswm)

;; thanks to this fellow https://github.com/alesguzik/home/blob/master/.clfswmrc

;(load-contrib "volume-mode.lisp")
;(load-contrib "amixer.lisp")

(setf *volume-mode-timeout* 1)

(defun eval-in-frame (frame fun &optional (at 0) till)
    (let ((old-current-child *current-child*))
        (add-timer at (lambda ()
            (setf *current-child* frame)
            (show-all-children)
            (funcall fun)))
        (when till
            (add-timer till (lambda ()
                (setf *current-child* old-current-child))))
        (values)))

(defun shell-in-frame (frame cmd &optional (at 0) till)
    (eval-in-frame frame (lambda () (do-shell cmd)) at till))

(defun execute-in-frame (frame cmd args &optional (at 0) till)
    (eval-in-frame frame (lambda () (do-execute cmd args)) at till))

;; frame hooks
(defmacro create-my-named-frame-nw-hook (name class)
"make a frame hook function"
    `(defun ,name (&optional (frame *current-child*))
        (when (frame-p frame)
            (setf (frame-nw-hook frame) 'absorb-window-nw-hook
                  (frame-data-slot frame :nw-absorb-test) (nw-absorb-test-class ,class)))))

(defmacro create-my-named-frame-nw-hooks (&rest hooks)
"make frame hooks, basically saves typing"
    (let ((hs (mapcar #'(lambda (h) (cons 'create-my-named-frame-nw-hook h)) hooks)))
        `(progn ,@hs)))

(create-my-named-frame-nw-hooks
    (opera-my-frame-nw-hook "Opera")
    (xterm-my-frame-nw-hook "xterm"))

(defun my-init-hook ()
    (dbg 'my-init-hook)
    (setf (frame-layout *root-frame*) #'tile-space-layout
          (frame-data-slot *root-frame* :tile-space-size) 0.05
          (frame-data-slot *root-frame* :tile-layout-keep-position) :yes)
    (let* (
        (terms-frame (add-frame (create-frame
                :name "Terms"
                :layout #'tile-layout-mix
                :data (list '(:tile-layout-keep-position :yes)))
            *root-frame*))
        (web-frame (add-frame (create-frame
                :name "Web"
                :layout #'maximize-layout
                :data (list '(:tile-layout-keep-position :yes)
                '(:tile-space-size 0.05)))
            *root-frame*))
        (learn-frame (add-frame (create-frame
                :name "Learn"
                :layout #'maximize-layout)
            *root-frame*))
        (code-frame (add-frame (create-frame
                :name "Code"
                :layout #'main-window-left-layout
                :data (list '(:tile-size 0.2)))
            *root-frame*)))
    (opera-my-frame-nw-hook web-frame)
    (xterm-my-frame-nw-hook terms-frame)
    (shell-in-frame web-frame "opera" 1)
    (shell-in-frame terms-frame "xterm" 5)))

(setf *init-hook* '(my-init-hook))

;; very uncool better make a macro or wrapper function

(defmacro add-my-run-or-raise-fn (name class cmd)
"make a run-or-raise-fn"
    `(defun ,name ()
        (run-or-raise
            (lambda (win)
                (string-equal ,class (xlib:get-wm-class win)))
            (lambda () (do-shell ,cmd)))))

(defmacro add-my-run-or-raise-fns (&rest rors)
"make run-or-raise fns, basically saves typing"
    (let ((rs (mapcar #'(lambda (r) (cons 'add-my-run-or-raise-fn r)) rors)))
        `(progn ,@rs)))

(add-my-run-or-raise-fns
    (start-opera "Opera" "cd $HOME && exec opera")
    (start-xterm "xterm" "cd $HOME && exec xterm"))

(defun set-some-keys ()
    (define-keys (main)
        (("l" :mod-1) 'expose-all-windows-mode)
        (("u" :mod-1) 'expose-windows-mode)
        (("w" :mod-4) 'start-opera)
        (("t" :mod-4) 'start-xterm))
    (undefine-main-key ("3" :mod-1)))

(add-hook *binding-hook* 'set-some-keys)

