(defun set-frame-layout-fast (layout &optional (frame (current-child)))
    (when (frame-p frame)
        (set-frame-default frame)
        (setf (frame-layout frame) layout)
        (show-all-children frame)))
                
(defun create-bounded-frame (name parent layout &optional (slot nil))
    (let ((frame (add-frame (create-frame :name name) parent)))
        (set-frame-layout-fast layout frame)
        (when slot (bind-child-on-slot slot frame))
        frame))
                               
(defun my-init-hook ()
    (let ((root (create-bounded-frame "Root" *root-frame* #'tile-space-layout)))
        (let* ((default   (create-bounded-frame "Default"   root #'tile-space-layout 0))
               (devel     (create-bounded-frame "Devel"     root #'tile-space-layout 1))
               (www       (create-bounded-frame "WWW"       root #'tile-space-layout 2))
               (unmanaged (create-bounded-frame "Unmanaged" root #'tile-left-layout  3)))
            (setf (frame-managed-type unmanaged) nil))
        (define-as-root root 0 0 (xlib:screen-width *screen*) (xlib:screen-height *screen*))
        (focus-all-children root root)))
                                                                              
(setf *init-hook* '(my-init-hook))

